//==============================User.js==============================================


/*'use strict';
const mongoose = require('mongoose')
const bcrypt = require('bcrypt')
const {isEmail}= require('validator')
// const {isEmail,isMobilePhone}=require('validator')

const UserSchema = new mongoose.Schema({
    email: {
        type: String,
        unique: true,
        required: [true, "Please Enter Email"],
        validate:[isEmail,"Please Enter valid Email."]
    },
    password: {
        type: String,
        unique: false,
        required: true,
        // minlength: [8, "Password must be minimum 8 characters long."],

    },
    username: {
        type: String,
        unique: true,
        required: [true, "Please Enter username."],
    },
    contact: {
        type: Number,
        unique: true,
        required: [true, "Please Enter contact no."],
        // validate:[isMobilePhone('en-IN', ),"Pleease Enter valid mobile no."]

    },
    userType: {
        type: String,
        unique: false,
        required: false,
        default:'Public'
        // validate:[isMobilePhone('en-IN', ),"Pleease Enter valid mobile no."]
    },
    paid: {
        type: String,
        unique: false,
        required: false,
        default:'demo'  //live for paid only
        // validate:[isMobilePhone('en-IN', ),"Pleease Enter valid mobile no."]
    },

})
mongoose.set('strictQuery', true);




UserSchema.pre('save',async function (next) {
    var user = this;

    // only hash the password if it has been modified (or is new)
    if (!user.isModified('password')) {
        return next();

    }

    // generate a salt
    bcrypt.genSalt(10, function (err, salt) {
        if (err) {
            return next(err);
        }
        // hash the password using our new salt
        bcrypt.hash(user.password, salt, function (err, hash) {
            if (err) {
                return next(err);
            }
            // override the cleartext password with the hashed one
            user.password = hash;
            next();
        }) }) })


        // const user = await User.findOne({ _id: req.user.userId });
        // if (!user) {
        //   throw new CustomError.UserNotFound();
        // }
        // const isPasswordValid = await user.comparePassword(oldPassword);
        



UserSchema.methods.comparePassword =async function (candidatePassword) {
    const user = this;
    return new Promise((resolve, reject) => {
        bcrypt.compare(candidatePassword, user.password, (err, isMatch) => {
            if (err || !isMatch)
                return reject(err);
            resolve(isMatch);
        });
    })
};


mongoose.model('User', UserSchema)*/


//==============================authroutes.js==============================================
/*
'use strict';
const express = require('express')
var app = express();
app.use(express.json());
const {error,success}=require('../utils/Constants')
// const passport=require('passport')
const mongoose = require('mongoose')
const jwt = require('jsonwebtoken')
const { jwtKey } = require('../confidential/jwtKey')
const router = express.Router();
const User = mongoose.model('User');

// const passportSetup=require('../models/GoogleAuth')

// const TAG='/signuproute'

// router.post("/signup", async (req, res) => {

//   const { email, password, username, contact } = req.body;
//   console.log("signup", req.body)

//   try {
//     const user = new User({ email, password, username, contact })
//     await user.save();
//     const tokenKey = jwt.sign({ userID: user._id }, jwtKey)
//     res.status(200).send(success("User saved successfully",tokenKey))
//   } catch (err) {
//     if(err.keyValue){
//       res.status(401).send(error(Object.keys(err.keyValue) + " is invalid or already used"))
//     }
//       else{
//         res.status(401).send(error(err.message))
//       }
//     console.log(TAG,err.message, err);
//   }
// })


router.post("/signin", async (req, res) => {
  const { userid, password } = req.body
  console.log("request body", req.body);
  var value={}


  if (!userid || !password) {
    return res.status(401).send(error('Password or Email/Username is missing.'));
  }
  

  if (password != '' && userid != '') {
    var user = await User.find({ })
    .clone()
    .catch((err)=> { console.log("error in finding user", err) });
    user.map((item,index)=>{
      if(item.username == req.body.userid || item.email== req.body.userid){
        value=item;
      }
    })
    console.log("->->->->->->",value);
    if (!value) {
      return res.status(401).send(error("User is not registered"))
    } else {
      try {
        await value.comparePassword(password)
        const token = jwt.sign({ userID: value._id }, jwtKey)
        let screenName=''
        if(value.userType== 'Admin'){
          screenName='Admin'
        }
        else{
          screenName='Public'
        }
        res.status(200).send({ tokenID:token, success:success('Successfully loged in'),screen:screenName })
      } catch (err) {
        console.log(err);
        return res.status(401).send(error('catch Password or Email/ Username not matched.'))
      }
    }
  }
  else {
    return res.status(401).send(error("Password or Email/Username is missing."))
  }
  
  

})

// router.post("/google",passport.authenticate('google',{
//   scope:['profile']
// }))


module.exports = router;*/